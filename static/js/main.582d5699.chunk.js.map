{"version":3,"sources":["todo/components/todo.jsx","todo/components/todoform.jsx","TodoApp.jsx","serviceWorker.jsx","index.jsx"],"names":["Todo","todo","index","todoHandler","Fragment","key","className","style","backgroundColor","isCompleted","color","textDecoration","text","onClick","TodoForm","props","onSubmit","e","preventDefault","id","type","onKeyUp","keyCode","onAddToDo","target","value","placeholder","ReactVersion","React","version","Component","App","useState","fname","lname","address","persons","setPersons","todos","setTodos","last","length","handleToDo","action","val","newToDos","splice","useEffect","document","title","map","newPersons","slice","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.582d5699.chunk.js","sourcesContent":["import React from \"react\";\nimport '../todo.css';\n\nconst Todo = ({ todo, index, todoHandler }) => {\n  return (\n    <React.Fragment>\n      <div key={index} className=\"card mb-3\">\n        <div className=\"card-body\">\n          <h5\n            className=\"card-title\"\n            style={{\n              backgroundColor: todo.isCompleted ? 'black' : 'burlywood',\n              color: todo.isCompleted ? 'yellow' : 'white',\n              textDecoration: todo.isCompleted ? \"line-through\" : \"\"\n            }}\n          >\n            {todo.text}\n          </h5>\n        </div>\n      </div>\n      <div className=\"completed-deleted\">\n        <div onClick={() => todoHandler('complete', index)} className=\"my-btn\">\n          {todo.isCompleted ? 'Mark Uncompleted' : 'Mark Completed'}\n        </div>\n        <div onClick={() => todoHandler('delete', index)} className=\"delete-btn\">&times;</div>\n      </div>\n    </React.Fragment>\n  );\n}\n\nexport default Todo;","import React from \"react\";\n\nfunction TodoForm(props) {\n  return (\n    <form onSubmit={e => { e.preventDefault(); }}>\n      <input\n        id=\"input\"\n        type=\"text\"\n        className=\"form-control-x\"\n        onKeyUp={e => {\n          e.preventDefault();\n          if (e.keyCode === 13) {\n            props.onAddToDo('add', e.target.value);\n            e.target.value = '';\n          }\n        }}\n        placeholder=\"Type then hit *Enter*\"\n      />\n    </form>\n  );\n}\n\nexport default TodoForm;\n\n// onChange = { e => { setValue(e.target.value); return false; }}","import React, { useState, useEffect, Component } from \"react\";\nimport Todo from './todo/components/todo';\nimport TodoForm from './todo/components/todoform';\n\nimport './todo/todo.css';\n\nclass ReactVersion extends Component {\n  render() {\n    return (\n      <div className=\"react-version\">\n        Currently using React {React.version}\n      </div>\n    )\n  }\n}\n\nfunction App() {\n  const [persons, setPersons] = useState([\n    { fname: 'Mili', lname: 'Milutinovic', address: '138 Princess St.' },\n    { fname: 'Milka', lname: 'Milutinovic', address: '138 Princess St.' }\n  ]);\n\n  const [todos, setTodos] = useState([\n    { text: \"Learn React Hooks\", isCompleted: false },\n    { text: \"Take a Drive\", isCompleted: false },\n    { text: \"Play some games\", isCompleted: false }\n  ]);\n  let last = persons.length - 1;\n  const scrollPerson = () => {\n    let newPersons = [persons[last], ...persons.slice(0, -1)];\n    setPersons([...newPersons]);\n  }\n  const handleToDo = (action, val) => {\n    let newToDos;\n    switch (action) {\n      case 'add':\n        // val is a text entered in input box\n        newToDos = [...todos, { text: val }];\n        if (persons.length === 2) {\n          setPersons([...persons, { fname: 'Marko', lname: 'Milutinovic', address: '100 Coe Hill Dr.' }]);\n        } else if (persons.length === 3) {\n          setPersons([...persons, { fname: 'Mia', lname: 'Milutinovic', address: '100 Coe Hill Dr.' }]);\n        }\n        break;\n      case 'complete':\n        // val is the index of ToDo item in the ToDos array\n        newToDos = [...todos];\n        newToDos[val].isCompleted = !newToDos[val].isCompleted;\n        break;\n      case 'delete':\n        // val is index of ToDo item in the ToDos array\n        newToDos = [...todos];\n        newToDos.splice(val, 1);\n        break;\n      default:\n        break;\n    }\n    setTodos(newToDos);\n  }\n  // const handleAddToDo = text => {\n  //   const newToDos = [...todos, { text }];\n  //   setTodos(newToDos);\n  // }\n\n  // const handleComplete = index => {\n  //   const newToDos = [...todos];\n\n  //   newToDos[index].isCompleted = !newToDos[index].isCompleted;\n  //   setTodos(newToDos);\n  // };\n\n  // const handleDeleteToDo = index => {\n  //   const newToDos = [...todos];\n  //   newToDos.splice(index, 1);\n  //   setTodos(newToDos);\n  // };\n\n  useEffect(() => {\n    // Update the document title using the browser API\n    document.title = `${persons[last].fname}`;\n  });\n  return (\n    <React.Fragment>\n      <ReactVersion />\n      {\n        todos.map((todo, index) => (\n          <Todo\n            todo={todo}\n            key={index}\n            index={index}\n            todoHandler={handleToDo}\n          />\n        ))\n      }\n      <TodoForm onAddToDo={handleToDo} value=\"Activate PRESTO card\" />\n      <div>Hello World! {todos[0].text}</div>\n      <div>Click on person data to scroll to another</div>\n      <div className=\"person\" onClick={scrollPerson}>{persons[last].fname} {persons[last].lname} {persons[last].address}</div>\n    </React.Fragment>\n  );\n}\n\nexport default App;\n// <Person scrolling={scrollPerson} person={persons[x]} />","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './TodoApp';\n// import App from './App';\n\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}